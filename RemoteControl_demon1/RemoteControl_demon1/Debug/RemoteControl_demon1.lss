
RemoteControl_demon1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000322  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ae  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800100  00800100  00000322  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000322  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000354  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a4c  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000768  00000000  00000000  00000e50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000043d  00000000  00000000  000015b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e4  00000000  00000000  000019f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ec  00000000  00000000  00001adc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000f8  00000000  00000000  00001ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00001fc0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 76 00 	jmp	0xec	; 0xec <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ea       	ldi	r30, 0xAE	; 174
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 30       	cpi	r26, 0x0C	; 12
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 27 01 	call	0x24e	; 0x24e <main>
  9e:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC0_init>:
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) ) //if the receive buffer is disable, RXC0 = 0
	;
	/* Get and return received data from buffer */
	return UDR0;
}
  a6:	80 e4       	ldi	r24, 0x40	; 64
  a8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
  ac:	08 95       	ret

000000ae <ADC1_init>:
  ae:	81 e4       	ldi	r24, 0x41	; 65
  b0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
  b4:	08 95       	ret

000000b6 <USART_Init>:
  b6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  ba:	88 e0       	ldi	r24, 0x08	; 8
  bc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  c0:	88 e1       	ldi	r24, 0x18	; 24
  c2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  c6:	86 e0       	ldi	r24, 0x06	; 6
  c8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  cc:	08 95       	ret

000000ce <USART_Transmit>:
  ce:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  d2:	95 ff       	sbrs	r25, 5
  d4:	fc cf       	rjmp	.-8      	; 0xce <USART_Transmit>
  d6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  da:	08 95       	ret

000000dc <checkState>:

int checkState()
{
	if (PINB & (1 << 0))	//Check PB0
  dc:	18 9b       	sbis	0x03, 0	; 3
  de:	03 c0       	rjmp	.+6      	; 0xe6 <checkState+0xa>
	{
		return 0;
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	08 95       	ret
	}
	else
	{
		return 1;
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	90 e0       	ldi	r25, 0x00	; 0
	}
}
  ea:	08 95       	ret

000000ec <__vector_21>:

ISR (ADC_vect)
{
  ec:	1f 92       	push	r1
  ee:	0f 92       	push	r0
  f0:	0f b6       	in	r0, 0x3f	; 63
  f2:	0f 92       	push	r0
  f4:	11 24       	eor	r1, r1
  f6:	8f 93       	push	r24
  f8:	9f 93       	push	r25
  fa:	ef 93       	push	r30
  fc:	ff 93       	push	r31
	adc_low = ADCL;
  fe:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <adc_low+0x1>
 108:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <adc_low>
	adc_high = ADCH;
 10c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <adc_high+0x1>
 116:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <adc_high>
	ADCSRA |= (1 << ADSC);
 11a:	ea e7       	ldi	r30, 0x7A	; 122
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	80 64       	ori	r24, 0x40	; 64
 122:	80 83       	st	Z, r24
}
 124:	ff 91       	pop	r31
 126:	ef 91       	pop	r30
 128:	9f 91       	pop	r25
 12a:	8f 91       	pop	r24
 12c:	0f 90       	pop	r0
 12e:	0f be       	out	0x3f, r0	; 63
 130:	0f 90       	pop	r0
 132:	1f 90       	pop	r1
 134:	18 95       	reti

00000136 <intToAscii>:

int intToAscii(int number) 
{
	return '0' + number;
}
 136:	c0 96       	adiw	r24, 0x30	; 48
 138:	08 95       	ret

0000013a <state1>:
	ADMUX = (1 << REFS0) | (1 << MUX0); //ADC1 //AVCC
}

void state1()
{
	if(adc0_1 == 0)
 13a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <adc0_1>
 13e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <adc0_1+0x1>
 142:	00 97       	sbiw	r24, 0x00	; 0
 144:	b1 f4       	brne	.+44     	; 0x172 <state1+0x38>
	{
		ADC0_init();
 146:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC0_init>
		ADCSRA |= (1 << ADSC); //start conversion
 14a:	ea e7       	ldi	r30, 0x7A	; 122
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	80 64       	ori	r24, 0x40	; 64
 152:	80 83       	st	Z, r24
		
		sum = adc_low;
 154:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <adc_low>
 158:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <adc_low+0x1>
 15c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 160:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		adc0_1 = 1;
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <adc0_1+0x1>
 16c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <adc0_1>
 170:	08 95       	ret
	}
	else if (adc0_1 == 1)
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	09 f0       	breq	.+2      	; 0x178 <state1+0x3e>
 176:	57 c0       	rjmp	.+174    	; 0x226 <state1+0xec>
	{
		ADC1_init();
 178:	0e 94 57 00 	call	0xae	; 0xae <ADC1_init>
		ADCSRA |= (1 << ADSC); //start conversion
 17c:	ea e7       	ldi	r30, 0x7A	; 122
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	80 81       	ld	r24, Z
 182:	80 64       	ori	r24, 0x40	; 64
 184:	80 83       	st	Z, r24
		
		sum = sum + adc_low;
 186:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 18a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 18e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <adc_low>
 192:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <adc_low+0x1>
 196:	82 0f       	add	r24, r18
 198:	93 1f       	adc	r25, r19
 19a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 19e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		if(sum >= 253 && sum <= 257) //up
 1a2:	9c 01       	movw	r18, r24
 1a4:	2d 5f       	subi	r18, 0xFD	; 253
 1a6:	31 09       	sbc	r19, r1
 1a8:	25 30       	cpi	r18, 0x05	; 5
 1aa:	31 05       	cpc	r19, r1
 1ac:	38 f4       	brcc	.+14     	; 0x1bc <state1+0x82>
		{
			USART_Transmit(intToAscii(1));
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	0e 94 9b 00 	call	0x136	; 0x136 <intToAscii>
 1b6:	0e 94 67 00 	call	0xce	; 0xce <USART_Transmit>
 1ba:	31 c0       	rjmp	.+98     	; 0x21e <state1+0xe4>
		}
		else if(sum >= 77 && sum <= 81) //left
 1bc:	9c 01       	movw	r18, r24
 1be:	2d 54       	subi	r18, 0x4D	; 77
 1c0:	31 09       	sbc	r19, r1
 1c2:	25 30       	cpi	r18, 0x05	; 5
 1c4:	31 05       	cpc	r19, r1
 1c6:	38 f4       	brcc	.+14     	; 0x1d6 <state1+0x9c>
		{
			USART_Transmit(intToAscii(2));
 1c8:	82 e0       	ldi	r24, 0x02	; 2
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	0e 94 9b 00 	call	0x136	; 0x136 <intToAscii>
 1d0:	0e 94 67 00 	call	0xce	; 0xce <USART_Transmit>
 1d4:	24 c0       	rjmp	.+72     	; 0x21e <state1+0xe4>
		}
		else if(sum >= 239 && sum <= 243) //right
 1d6:	9c 01       	movw	r18, r24
 1d8:	2f 5e       	subi	r18, 0xEF	; 239
 1da:	31 09       	sbc	r19, r1
 1dc:	25 30       	cpi	r18, 0x05	; 5
 1de:	31 05       	cpc	r19, r1
 1e0:	38 f4       	brcc	.+14     	; 0x1f0 <state1+0xb6>
		{
			USART_Transmit(intToAscii(3));
 1e2:	83 e0       	ldi	r24, 0x03	; 3
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	0e 94 9b 00 	call	0x136	; 0x136 <intToAscii>
 1ea:	0e 94 67 00 	call	0xce	; 0xce <USART_Transmit>
 1ee:	17 c0       	rjmp	.+46     	; 0x21e <state1+0xe4>
		}
		else if(sum >= 91 && sum <= 95) //back
 1f0:	9c 01       	movw	r18, r24
 1f2:	2b 55       	subi	r18, 0x5B	; 91
 1f4:	31 09       	sbc	r19, r1
 1f6:	25 30       	cpi	r18, 0x05	; 5
 1f8:	31 05       	cpc	r19, r1
 1fa:	38 f4       	brcc	.+14     	; 0x20a <state1+0xd0>
		{
			USART_Transmit(intToAscii(4));
 1fc:	84 e0       	ldi	r24, 0x04	; 4
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	0e 94 9b 00 	call	0x136	; 0x136 <intToAscii>
 204:	0e 94 67 00 	call	0xce	; 0xce <USART_Transmit>
 208:	0a c0       	rjmp	.+20     	; 0x21e <state1+0xe4>
		}
		else if(sum >= 169 && sum <= 174)//stop
 20a:	89 5a       	subi	r24, 0xA9	; 169
 20c:	91 09       	sbc	r25, r1
 20e:	06 97       	sbiw	r24, 0x06	; 6
 210:	30 f4       	brcc	.+12     	; 0x21e <state1+0xe4>
		{
			USART_Transmit(intToAscii(0));
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	0e 94 9b 00 	call	0x136	; 0x136 <intToAscii>
 21a:	0e 94 67 00 	call	0xce	; 0xce <USART_Transmit>
// 		USART_Transmit(intToAscii(cal));
// 		cal = sum % 10;
// 		USART_Transmit(intToAscii(cal));
// 		USART_Transmit(' ');
		
		adc0_1 = 0;
 21e:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <adc0_1+0x1>
 222:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <adc0_1>
 226:	08 95       	ret

00000228 <ctcdelay>:
	return '0' + number;
}

void ctcdelay()
{
	for(int j = 0; j < 160; j++) //10ms delay
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	0c c0       	rjmp	.+24     	; 0x246 <ctcdelay+0x1e>
	{
		OCR0A = 100; //set OCR0A to 100
 22e:	24 e6       	ldi	r18, 0x64	; 100
 230:	27 bd       	out	0x27, r18	; 39
		TCCR0A = 0x02; //set timer0 to CTC mode
 232:	22 e0       	ldi	r18, 0x02	; 2
 234:	24 bd       	out	0x24, r18	; 36
		TCCR0B = 0x01; //set no per-scaler
 236:	21 e0       	ldi	r18, 0x01	; 1
 238:	25 bd       	out	0x25, r18	; 37
		while((TIFR0&(1<<OCF0A))==0); // when OCF0A = 0 (not overflow), wait
 23a:	a9 9b       	sbis	0x15, 1	; 21
 23c:	fe cf       	rjmp	.-4      	; 0x23a <ctcdelay+0x12>
		TCCR0B = 0; //reset timer
 23e:	15 bc       	out	0x25, r1	; 37
		TIFR0 = 0x02;
 240:	22 e0       	ldi	r18, 0x02	; 2
 242:	25 bb       	out	0x15, r18	; 21
	return '0' + number;
}

void ctcdelay()
{
	for(int j = 0; j < 160; j++) //10ms delay
 244:	01 96       	adiw	r24, 0x01	; 1
 246:	80 3a       	cpi	r24, 0xA0	; 160
 248:	91 05       	cpc	r25, r1
 24a:	8c f3       	brlt	.-30     	; 0x22e <ctcdelay+0x6>
		TCCR0B = 0x01; //set no per-scaler
		while((TIFR0&(1<<OCF0A))==0); // when OCF0A = 0 (not overflow), wait
		TCCR0B = 0; //reset timer
		TIFR0 = 0x02;
	}
}
 24c:	08 95       	ret

0000024e <main>:

int main(void)
{
	DDRB = 0x00;		//PB0 = input
 24e:	14 b8       	out	0x04, r1	; 4
	USART_Init();
 250:	0e 94 5b 00 	call	0xb6	; 0xb6 <USART_Init>
	sei();
 254:	78 94       	sei
	ADCSRA = (1 << ADEN) | (1 << ADIE) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
 256:	8f e8       	ldi	r24, 0x8F	; 143
 258:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	
    while (1) 
    {
		if(!state)
 25c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <state>
 260:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <state+0x1>
 264:	00 97       	sbiw	r24, 0x00	; 0
 266:	29 f0       	breq	.+10     	; 0x272 <main+0x24>
 268:	10 c0       	rjmp	.+32     	; 0x28a <main+0x3c>
		{
			for (int i = 0; i < 10; i++) //delay 1s
			{
				ctcdelay();
 26a:	0e 94 14 01 	call	0x228	; 0x228 <ctcdelay>
	
    while (1) 
    {
		if(!state)
		{
			for (int i = 0; i < 10; i++) //delay 1s
 26e:	21 96       	adiw	r28, 0x01	; 1
 270:	02 c0       	rjmp	.+4      	; 0x276 <main+0x28>
 272:	c0 e0       	ldi	r28, 0x00	; 0
 274:	d0 e0       	ldi	r29, 0x00	; 0
 276:	ca 30       	cpi	r28, 0x0A	; 10
 278:	d1 05       	cpc	r29, r1
 27a:	bc f3       	brlt	.-18     	; 0x26a <main+0x1c>
			{
				ctcdelay();
			}
			state = checkState();
 27c:	0e 94 6e 00 	call	0xdc	; 0xdc <checkState>
 280:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <state+0x1>
 284:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <state>
 288:	e9 cf       	rjmp	.-46     	; 0x25c <main+0xe>
		}
		else if(state)
 28a:	89 2b       	or	r24, r25
 28c:	39 f3       	breq	.-50     	; 0x25c <main+0xe>
		{
			state1();
 28e:	0e 94 9d 00 	call	0x13a	; 0x13a <state1>
			for (int i = 0; i < 10; i++) //delay 1s
 292:	c0 e0       	ldi	r28, 0x00	; 0
 294:	d0 e0       	ldi	r29, 0x00	; 0
 296:	03 c0       	rjmp	.+6      	; 0x29e <main+0x50>
			{
				ctcdelay();
 298:	0e 94 14 01 	call	0x228	; 0x228 <ctcdelay>
			state = checkState();
		}
		else if(state)
		{
			state1();
			for (int i = 0; i < 10; i++) //delay 1s
 29c:	21 96       	adiw	r28, 0x01	; 1
 29e:	ca 30       	cpi	r28, 0x0A	; 10
 2a0:	d1 05       	cpc	r29, r1
 2a2:	d4 f3       	brlt	.-12     	; 0x298 <main+0x4a>
			{
				ctcdelay();
			}
			ctcdelay();
 2a4:	0e 94 14 01 	call	0x228	; 0x228 <ctcdelay>
 2a8:	d9 cf       	rjmp	.-78     	; 0x25c <main+0xe>

000002aa <_exit>:
 2aa:	f8 94       	cli

000002ac <__stop_program>:
 2ac:	ff cf       	rjmp	.-2      	; 0x2ac <__stop_program>
